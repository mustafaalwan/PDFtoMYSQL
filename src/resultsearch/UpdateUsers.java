/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package resultsearch;

import com.pdflib.TET;
import com.pdflib.TETException;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Sherif
 */
public class UpdateUsers extends javax.swing.JFrame {

    /**
     * Creates new form UpdateUsers
     */
    public UpdateUsers() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("تحديث النتائج");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("إختبار الاتصال بقاعدة البيانات");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setForeground(new java.awt.Color(255, 0, 51));
        jLabel3.setText("السنة الدراسية*");

        jLabel4.setText("مثال: 1437");

        jLabel5.setText("إدخل مسار مجلد ملفات النتائج");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(151, 151, 151)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            if (Connect.testConnection()) {
                jLabel2.setText("نجح الاتصال بقاعدة البيانات!");
                System.out.print("working");
            } else {
                jLabel2.setText("فشل الاتصال بقاعدة البيانات - راجع مسؤول النظام");
                System.out.print("down");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdateUsers.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(UpdateUsers.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    class ValidateThread implements Runnable {

        public void run() {
            extract(jTextField1.getText());
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jTextField1.getText().equals("") || jTextField1.getText().equals("")) {
            jLabel2.setText("تأكد من إدخال كافة الحقول قبل المتابعة!");
        } else {
            Runnable runnable = new ValidateThread();
            Thread thread = new Thread(runnable);
            thread.start();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new UpdateUsers().setVisible(true);
            }
        });
    }
    /**
     * Global option list
     */
    static final String globaloptlist =
            "searchpath={{../data} {../../../resource/cmap}}";
    /**
     * Document-specific option list
     */
    static final String docoptlist = "";
    /**
     * Page-specific option list
     */
    static final String pageoptlist = "granularity=page";
    /**
     * Separator to emit after each chunk of text. This depends on the
     * applications needs; for granularity=word a space character may be useful.
     */
    static final String separator = "\n";

    public void extract(String pdfsDirectory) {
        TET tet = null;
        String documentStr;
        ArrayList<Student> students = new ArrayList<Student>();
        ArrayList<String> documents = new ArrayList<String>();
        int totalStudents = 0;
        try {
            ArrayList<String> pdfFiles = new ArrayList<String>();
            File directory = new File(pdfsDirectory);

            // get all the files from a directory
            File[] fList = directory.listFiles();

            for (File file : fList) {
                if (file.getName().endsWith(".pdf") || file.getName().endsWith(".PDF")) {
                    pdfFiles.add(file.getAbsolutePath());
                }
            }

            for (int i = 0; i < pdfFiles.size(); i++) {
                documentStr = new String();

                List<String> allMatches = new ArrayList<String>();

                /*
                 * Write to file
                 */
                //Writer outfp = new BufferedWriter(new OutputStreamWriter(
                //new FileOutputStream(i + ".txt"), "UTF-8"));

                tet = new TET();
                tet.set_option(globaloptlist);
                int doc = tet.open_document(pdfFiles.get(i), docoptlist);

                if (doc == -1) {
                    throw new Exception("Error " + tet.get_errnum() + "in "
                            + tet.get_apiname() + "(): " + tet.get_errmsg());
                }

                /*
                 * get number of pages in the document
                 */
                int n_pages = (int) tet.pcos_get_number(doc, "length:pages");

                /*
                 * loop over pages in the document
                 */
                for (int pageno = 1; pageno <= n_pages; ++pageno) {
                    String text;
                    int page;

                    page = tet.open_page(doc, pageno, pageoptlist);

                    if (page == -1) {
                        print_tet_error(tet, pageno);
                        continue; /*
                         * try next page
                         */
                    }

                    /*
                     * Retrieve all text fragments; This is actually not
                     * required for granularity=page, but must be used for other
                     * granularities.
                     */

                    while ((text = tet.get_text(page)) != null) {
                        /*
                         * print the retrieved text
                         */

                        // outfp.write(text);
                        documentStr = documentStr + text;
                        // outfp.write(separator);
                    }



                    if (tet.get_errnum() != 0) {
                        print_tet_error(tet, pageno);
                    }

                    tet.close_page(page);
                }

                System.out.println(" Processing pdf no. " + i);
                jTextArea1.append(" Processing pdf no. " + i);
                Matcher regexMatcher = Pattern.compile("(ناجح|مكمل|راسب)\\s([0-9]+\\s*)+((\\P{Nd})+\\s*){3,6}[0-9]+", Pattern.DOTALL).matcher(documentStr);

                while (regexMatcher.find()) {
                    allMatches.add(regexMatcher.group());
                }
                for (String studentStr : allMatches) {
                    documentStr = documentStr.replace(studentStr, "removed");
                }

                regexMatcher = Pattern.compile("removed").matcher(documentStr);
                int counter = 0;
                while (regexMatcher.find()) {
                    counter++;
                }
                for (String studentMatch : allMatches) {
                    List<String> studentGrades = new ArrayList<String>();

                    String gradesLine = null;
                    String status = null;
                    String studentName = null;
                    String rkmEmthany = null;
                    int total = 0;
                    regexMatcher = Pattern.compile("(\\d+\\s*)+").matcher(studentMatch);

                    if (regexMatcher.find()) {
                        gradesLine = regexMatcher.group();
                    }

                    studentMatch = studentMatch.replace(gradesLine, "");
                    studentGrades = Arrays.asList(gradesLine.split("\\s"));
                    if (studentGrades.size() != 8) {
                        continue;
                    }
                    regexMatcher = Pattern.compile("(ناجح|مكمل|راسب)").matcher(studentMatch);
                    if (regexMatcher.find()) {
                        status = regexMatcher.group();
                    }
                    studentMatch = studentMatch.replace(status, "");

                    regexMatcher = Pattern.compile("((\\P{Nd})+\\s*){3,6}").matcher(studentMatch);
                    if (regexMatcher.find()) {
                        studentName = regexMatcher.group();
                    }
                    studentMatch = studentMatch.replace(studentName, "");


                    rkmEmthany = studentMatch.replaceAll("\\s", "");

                    if (!status.equals("ناجح")) {
                        total = 0;
                    } else {
                        for (String mark : studentGrades) {
                            total = total + Integer.parseInt(mark);
                        }
                    }
                    Student student = new Student(Integer.parseInt(studentGrades.get(7)), Integer.parseInt(studentGrades.get(6)),
                            Integer.parseInt(studentGrades.get(5)), Integer.parseInt(studentGrades.get(4)), Integer.parseInt(studentGrades.get(3)),
                            Integer.parseInt(studentGrades.get(2)), Integer.parseInt(studentGrades.get(1)), Integer.parseInt(studentGrades.get(0)),
                            rkmEmthany, studentName, total, status);
                    students.add(student);
                }
                documents.add(documentStr);

                totalStudents += allMatches.size();

                tet.close_document(doc);

                System.out.println("Done 100% \n");
                jTextArea1.append("Done 100% \n");
            }
        } catch (TETException e) {
            System.err.println("TET exception occurred in extractor sample:");
            System.err.println("[" + e.get_errnum() + "] " + e.get_apiname()
                    + ": " + e.get_errmsg());
        } catch (Exception e) {
            System.err.println(e.getMessage());
        } finally {
            if (tet != null) {
                tet.delete();
            }
        }

        String finalFile = "";
        for (Student student : students) {
            finalFile = finalFile + "الإسم: " + student.name + "الرقم الإمتحاني: " + student.rkmEmthany + "المجموع: " + student.total + "الحالة: " + student.status + "\n";
            insertStudent(student);
        }

    }

    /**
     * Report a TET error.
     *
     * @param tet The TET object
     * @param pageno The page number on which the error occurred
     */
    private static void print_tet_error(TET tet, int pageno) {
        System.err.println("Error " + tet.get_errnum() + " in  "
                + tet.get_apiname() + "() on page " + pageno + ": "
                + tet.get_errmsg());
    }

    public void insertStudent(Student student) {
        String Query;
        Query = "INSERT INTO results(name,seatNo,total,status,year,tarbiaEslamia, loghaArabia, loghaEnglizia, ryadyat, egtmaeyat, ahyaa, kmeia, physia) VALUES ('" + student.name + "','" + student.rkmEmthany + "'"
                + ",'" + student.total + "','" + student.status + "','" + jTextField2.getText() + ""
                + "','" + student.tarbiaEslamia + ""
                + "','" + student.loghaArabia + ""
                + "','" + student.loghaEnglizia + ""
                + "','" + student.ryadyat + ""
                + "','" + student.egtmaeyat + ""
                + "','" + student.ahyaa + ""
                + "','" + student.kmeia + ""
                + "','" + student.physia + ""
                + "')";

        String[][] resultInsert;
        resultInsert = new String[1][1];
        resultInsert = Connect.Conn(Query, true);

        if (resultInsert[0][0].equals("1")) {
            jTextArea1.append("student: " + student.rkmEmthany + " 100% \n");
        } else {
            jTextArea1.append("student: " + student.rkmEmthany + " is already inserted \n");
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
